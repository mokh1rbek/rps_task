// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/user_servise/user_servise.proto

package user_servise

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiseClient is the client API for UserServise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiseClient interface {
	GetUserById(ctx context.Context, in *UserPrimayKey, opts ...grpc.CallOption) (*User, error)
	Summ(ctx context.Context, in *Nums, opts ...grpc.CallOption) (*Sum, error)
	Max(ctx context.Context, in *Slise, opts ...grpc.CallOption) (*MaxNum, error)
	Subtraction(ctx context.Context, in *SubtReq, opts ...grpc.CallOption) (*SubtResp, error)
	Multiplication(ctx context.Context, in *MultReq, opts ...grpc.CallOption) (*MultResp, error)
	Division(ctx context.Context, in *DivReq, opts ...grpc.CallOption) (*DivResp, error)
	SquareRoot(ctx context.Context, in *SqrtReq, opts ...grpc.CallOption) (*SqrtResp, error)
	Power(ctx context.Context, in *PowReq, opts ...grpc.CallOption) (*PowResp, error)
	ArrayMin(ctx context.Context, in *MnReq, opts ...grpc.CallOption) (*MnResp, error)
}

type userServiseClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiseClient(cc grpc.ClientConnInterface) UserServiseClient {
	return &userServiseClient{cc}
}

func (c *userServiseClient) GetUserById(ctx context.Context, in *UserPrimayKey, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user_servise.UserServise/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiseClient) Summ(ctx context.Context, in *Nums, opts ...grpc.CallOption) (*Sum, error) {
	out := new(Sum)
	err := c.cc.Invoke(ctx, "/user_servise.UserServise/Summ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiseClient) Max(ctx context.Context, in *Slise, opts ...grpc.CallOption) (*MaxNum, error) {
	out := new(MaxNum)
	err := c.cc.Invoke(ctx, "/user_servise.UserServise/Max", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiseClient) Subtraction(ctx context.Context, in *SubtReq, opts ...grpc.CallOption) (*SubtResp, error) {
	out := new(SubtResp)
	err := c.cc.Invoke(ctx, "/user_servise.UserServise/Subtraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiseClient) Multiplication(ctx context.Context, in *MultReq, opts ...grpc.CallOption) (*MultResp, error) {
	out := new(MultResp)
	err := c.cc.Invoke(ctx, "/user_servise.UserServise/Multiplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiseClient) Division(ctx context.Context, in *DivReq, opts ...grpc.CallOption) (*DivResp, error) {
	out := new(DivResp)
	err := c.cc.Invoke(ctx, "/user_servise.UserServise/Division", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiseClient) SquareRoot(ctx context.Context, in *SqrtReq, opts ...grpc.CallOption) (*SqrtResp, error) {
	out := new(SqrtResp)
	err := c.cc.Invoke(ctx, "/user_servise.UserServise/SquareRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiseClient) Power(ctx context.Context, in *PowReq, opts ...grpc.CallOption) (*PowResp, error) {
	out := new(PowResp)
	err := c.cc.Invoke(ctx, "/user_servise.UserServise/Power", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiseClient) ArrayMin(ctx context.Context, in *MnReq, opts ...grpc.CallOption) (*MnResp, error) {
	out := new(MnResp)
	err := c.cc.Invoke(ctx, "/user_servise.UserServise/ArrayMin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiseServer is the server API for UserServise service.
// All implementations must embed UnimplementedUserServiseServer
// for forward compatibility
type UserServiseServer interface {
	GetUserById(context.Context, *UserPrimayKey) (*User, error)
	Summ(context.Context, *Nums) (*Sum, error)
	Max(context.Context, *Slise) (*MaxNum, error)
	Subtraction(context.Context, *SubtReq) (*SubtResp, error)
	Multiplication(context.Context, *MultReq) (*MultResp, error)
	Division(context.Context, *DivReq) (*DivResp, error)
	SquareRoot(context.Context, *SqrtReq) (*SqrtResp, error)
	Power(context.Context, *PowReq) (*PowResp, error)
	ArrayMin(context.Context, *MnReq) (*MnResp, error)
	mustEmbedUnimplementedUserServiseServer()
}

// UnimplementedUserServiseServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiseServer struct {
}

func (UnimplementedUserServiseServer) GetUserById(context.Context, *UserPrimayKey) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServiseServer) Summ(context.Context, *Nums) (*Sum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summ not implemented")
}
func (UnimplementedUserServiseServer) Max(context.Context, *Slise) (*MaxNum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Max not implemented")
}
func (UnimplementedUserServiseServer) Subtraction(context.Context, *SubtReq) (*SubtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtraction not implemented")
}
func (UnimplementedUserServiseServer) Multiplication(context.Context, *MultReq) (*MultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiplication not implemented")
}
func (UnimplementedUserServiseServer) Division(context.Context, *DivReq) (*DivResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Division not implemented")
}
func (UnimplementedUserServiseServer) SquareRoot(context.Context, *SqrtReq) (*SqrtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SquareRoot not implemented")
}
func (UnimplementedUserServiseServer) Power(context.Context, *PowReq) (*PowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Power not implemented")
}
func (UnimplementedUserServiseServer) ArrayMin(context.Context, *MnReq) (*MnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArrayMin not implemented")
}
func (UnimplementedUserServiseServer) mustEmbedUnimplementedUserServiseServer() {}

// UnsafeUserServiseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiseServer will
// result in compilation errors.
type UnsafeUserServiseServer interface {
	mustEmbedUnimplementedUserServiseServer()
}

func RegisterUserServiseServer(s grpc.ServiceRegistrar, srv UserServiseServer) {
	s.RegisterService(&UserServise_ServiceDesc, srv)
}

func _UserServise_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPrimayKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiseServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_servise.UserServise/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiseServer).GetUserById(ctx, req.(*UserPrimayKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServise_Summ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nums)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiseServer).Summ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_servise.UserServise/Summ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiseServer).Summ(ctx, req.(*Nums))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServise_Max_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Slise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiseServer).Max(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_servise.UserServise/Max",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiseServer).Max(ctx, req.(*Slise))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServise_Subtraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiseServer).Subtraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_servise.UserServise/Subtraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiseServer).Subtraction(ctx, req.(*SubtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServise_Multiplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiseServer).Multiplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_servise.UserServise/Multiplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiseServer).Multiplication(ctx, req.(*MultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServise_Division_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiseServer).Division(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_servise.UserServise/Division",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiseServer).Division(ctx, req.(*DivReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServise_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqrtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiseServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_servise.UserServise/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiseServer).SquareRoot(ctx, req.(*SqrtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServise_Power_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiseServer).Power(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_servise.UserServise/Power",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiseServer).Power(ctx, req.(*PowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServise_ArrayMin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiseServer).ArrayMin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_servise.UserServise/ArrayMin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiseServer).ArrayMin(ctx, req.(*MnReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServise_ServiceDesc is the grpc.ServiceDesc for UserServise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_servise.UserServise",
	HandlerType: (*UserServiseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserById",
			Handler:    _UserServise_GetUserById_Handler,
		},
		{
			MethodName: "Summ",
			Handler:    _UserServise_Summ_Handler,
		},
		{
			MethodName: "Max",
			Handler:    _UserServise_Max_Handler,
		},
		{
			MethodName: "Subtraction",
			Handler:    _UserServise_Subtraction_Handler,
		},
		{
			MethodName: "Multiplication",
			Handler:    _UserServise_Multiplication_Handler,
		},
		{
			MethodName: "Division",
			Handler:    _UserServise_Division_Handler,
		},
		{
			MethodName: "SquareRoot",
			Handler:    _UserServise_SquareRoot_Handler,
		},
		{
			MethodName: "Power",
			Handler:    _UserServise_Power_Handler,
		},
		{
			MethodName: "ArrayMin",
			Handler:    _UserServise_ArrayMin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user_servise/user_servise.proto",
}
